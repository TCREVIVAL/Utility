import * as XLSX from 'xlsx/dist/xlsx.full.min.js';
import React, { useState, useEffect } from "react";
import { LCDClient, MnemonicKey, MsgExecuteContract, MsgSend, isTxError } from "@terra-money/terra.js";

export default function App() {
  const [mnemonic, setMnemonic] = useState("");
  const [tokenContract, setTokenContract] = useState("");
  const [isToken, setIsToken] = useState(true);
  const [recipients, setRecipients] = useState([{ address: "", amount: "" }]);
  const [txHash, setTxHash] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const [tokenInfo, setTokenInfo] = useState(null);

  const handleRecipientChange = (index, field, value) => {
    const updated = [...recipients];
    updated[index][field] = value;
    setRecipients(updated);
  };

  const addRecipient = () => {
    setRecipients([...recipients, { address: "", amount: "" }]);
  };

  const removeRecipient = (index) => {
    setRecipients(recipients.filter((_, i) => i !== index));
  };

  const handleSend = async () => {
    setError("");
    setTxHash("");
    setLoading(true);

    try {
      const terra = new LCDClient({
        URL: "https://lcd.terra-classic.hexxagon.io/",
        chainID: "columbus-5",
      });

      const mk = new MnemonicKey({ mnemonic });
      const wallet = terra.wallet(mk);

      const msgs = [];

      for (const { address, amount } of recipients) {
        if (!address || isNaN(amount) || parseFloat(amount) <= 0) {
          throw new Error("Invalid recipient or amount.");
        }

        const amt = (parseFloat(amount) * 1e6).toFixed(0);

        if (isToken) {
          msgs.push(
            new MsgExecuteContract(wallet.key.accAddress, tokenContract, {
              transfer: {
                recipient: address,
                amount: amt,
              },
            })
          );
        } else {
          msgs.push(new MsgSend(wallet.key.accAddress, address, { uluna: amt }));
        }
      }

      const tx = await wallet.createAndSignTx({
        msgs,
        gasPrices: { uluna: 28.4 },
        gasAdjustment: 1.4,
      });

      const result = await terra.tx.broadcast(tx);

      if (isTxError(result)) {
        setError(`❌ Transaction failed: ${result.raw_log}`);
      } else {
        setTxHash(result.txhash);
        setMnemonic("");
        setTokenContract("");
        setTokenInfo(null);
        setRecipients([{ address: "", amount: "" }]);
      }
    } catch (err) {
      setError("❌ " + err.message);
    }

    setLoading(false);
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    if (!file.name.endsWith(".xlsx")) {
      setError("❌ Invalid file type. Please upload a .xlsx Excel file.");
      return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
      const data = new Uint8Array(e.target.result);
      try {
        const workbook = XLSX.read(data, { type: "array" });
        const sheet = workbook.Sheets[workbook.SheetNames[0]];
        const rows = XLSX.utils.sheet_to_json(sheet, { header: 1 });

        if (!rows.length || rows[0][0]?.toLowerCase() !== "address" || rows[0][1]?.toLowerCase() !== "amount") {
          setError("❌ Excel file must have 'Address' and 'Amount' columns.");
          return;
        }

        const formattedRecipients = rows.slice(1).map((row) => ({
          address: row[0],
          amount: row[1],
        }));

        const isValid = formattedRecipients.every(
          (r) => r.address && !isNaN(r.amount) && parseFloat(r.amount) > 0
        );

        if (!isValid) {
          setError("❌ Invalid data in Excel file.");
          return;
        }

        setRecipients(formattedRecipients);
        setError("");
      } catch {
        setError("❌ Failed to read the Excel file. Make sure it's properly formatted.");
      }
    };

    reader.readAsArrayBuffer(file);
  };

  const fetchTokenInfo = async () => {
    try {
      if (!tokenContract) return;

      const terra = new LCDClient({
        URL: "https://lcd.terra-classic.hexxagon.io/",
        chainID: "columbus-5",
      });

      const response = await terra.wasm.contractQuery(tokenContract, { token_info: {} });
      setTokenInfo(response);
    } catch (err) {
      setTokenInfo(null);
    }
  };

  useEffect(() => {
    if (isToken && tokenContract.length > 0) {
      fetchTokenInfo();
    } else {
      setTokenInfo(null);
    }
  }, [tokenContract]);

  const resetAll = () => {
    setMnemonic("");
    setTokenContract("");
    setIsToken(true);
    setTokenInfo(null);
    setRecipients([{ address: "", amount: "" }]);
    setTxHash("");
    setError("");
  };

  return (
    <div className="max-w-xl mx-auto p-6 space-y-4 text-white">
      <h1 className="text-2xl font-bold text-center">TCR - A USTC BURNING TOKEN</h1>
      <h5 className="text-2xl font-bold text-center">Welcome to Batch Sender</h5>
      <h5 className="text-2xl font-bold text-center">Please understand and test the utility before using, Use the utility at your own risk, We will not be liable for any losses you may have to occur.</h5>

      <label className="block text-sm">Your 24-word Mnemonic:</label>
      <input
        className="w-full p-2 rounded bg-gray-700 border border-gray-600"
        type="text"
        value={mnemonic}
        onChange={(e) => setMnemonic(e.target.value)}
      />

      <div className="flex items-center space-x-4">
        <label className="text-sm">Send:</label>
        <select
          value={isToken ? "token" : "lunc"}
          onChange={(e) => setIsToken(e.target.value === "token")}
          className="bg-gray-700 border border-gray-600 p-2 rounded"
        >
          <option value="token">CW20 Token</option>
          <option value="lunc">Native LUNC</option>
        </select>
      </div>

      {isToken && (
        <>
          <label className="block text-sm">Token Contract Address:</label>
          <input
            className="w-full p-2 rounded bg-gray-700 border border-gray-600"
            type="text"
            value={tokenContract}
            onChange={(e) => setTokenContract(e.target.value)}
          />
          {tokenInfo && (
            <div className="text-green-400 text-sm mt-1">
              Detected Token: {tokenInfo.name} ({tokenInfo.symbol})
            </div>
          )}
        </>
      )}

      <div className="space-y-2">
        <label className="text-sm block">Upload Excel File:</label>
        <input
          type="file"
          accept=".xlsx"
          onChange={handleFileUpload}
          className="w-full p-2 rounded bg-gray-700 border border-gray-600"
        />
      </div>

      <div className="space-y-2">
        <label className="text-sm block">Recipients:</label>
        {recipients.map((r, index) => (
          <div key={index} className="flex items-center gap-2">
            <input
              className="flex-1 p-2 rounded bg-gray-700 border border-gray-600"
              placeholder="Wallet Address"
              value={r.address}
              onChange={(e) => handleRecipientChange(index, "address", e.target.value)}
            />
            <input
              className="w-24 p-2 rounded bg-gray-700 border border-gray-600"
              placeholder="Amount"
              value={r.amount}
              onChange={(e) => handleRecipientChange(index, "amount", e.target.value)}
            />
            {recipients.length > 1 && (
              <button onClick={() => removeRecipient(index)} className="text-red-400 font-bold">×</button>
            )}
          </div>
        ))}
        <button onClick={addRecipient} className="text-blue-400 mt-1">+ Add another</button>
      </div>

      <button
        onClick={handleSend}
        className="w-full bg-blue-600 hover:bg-blue-700 p-2 rounded"
        disabled={loading}
      >
        {loading ? "Sending..." : "Send Now"}
      </button>

      <button
        onClick={resetAll}
        className="w-full mt-2 bg-gray-600 hover:bg-gray-700 p-2 rounded"
      >
        Reset All
      </button>

      {txHash && (
        <div className="text-green-400 mt-4">
          ✅ Transaction sent! Hash:{" "}
          <a
            href={`https://finder.terra.money/classic/tx/${txHash}`}
            target="_blank"
            rel="noreferrer"
            className="underline"
          >
            {txHash}
          </a>
        </div>
      )}

      {error && <div className="text-red-400 mt-4">{error}</div>}

      <p className="text-sm text-gray-400 mt-6">
  🔒 This app runs in your browser and does not store your mnemonic, address, or amount anywhere.<br /><br />

  <b>Instructions to use the Utility </b> <br /><br />
  Step 1: Enter Menmonic <br />
  Step 2: Enter TokenAddress<br />
  Step 3: If using excel file make sure the structure of excel file is " Address  Amount " and then populate the rows with respective token and amounts you wish to send.<br /><br />

  <b>FUN FACTS</b><br />
  <b>Help and support</b>Help and support our project and keep them <b>open source</b>. 
  Trade TCR tokens to accelerate USTC Burns + Genrate Long Term Wealth <br />
  This is not financial Advice.
</p>
    </div>
  );
}
//Final version Working

// updated version 
import * as XLSX from 'xlsx/dist/xlsx.full.min.js';
import React, { useState, useEffect } from "react";
import { LCDClient, MnemonicKey, MsgExecuteContract, MsgSend, isTxError } from "@terra-money/terra.js";

export default function App() {
  const [mnemonic, setMnemonic] = useState("");
  const [showMnemonic, setShowMnemonic] = useState(false);
  const [tokenContract, setTokenContract] = useState("");
  const [isToken, setIsToken] = useState(true);
  const [recipients, setRecipients] = useState([{ address: "", amount: "" }]);
  const [txHash, setTxHash] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const [tokenInfo, setTokenInfo] = useState(null);

  useEffect(() => {
    if (console && (console.log.toString().includes("mnemonic") || console.debug?.toString().includes("mnemonic"))) {
      alert("⚠️ Warning: Mnemonic should never be logged to console.");
    }
  }, []);

  const handleRecipientChange = (index, field, value) => {
    const updated = [...recipients];
    updated[index][field] = value;
    setRecipients(updated);
  };

  const addRecipient = () => {
    setRecipients([...recipients, { address: "", amount: "" }]);
  };

  const removeRecipient = (index) => {
    setRecipients(recipients.filter((_, i) => i !== index));
  };

  const handleSend = async () => {
    setError("");
    setTxHash("");
    setLoading(true);

    try {
      const terra = new LCDClient({
        URL: "https://lcd.terra-classic.hexxagon.io/",
        chainID: "columbus-5",
      });

      const mk = new MnemonicKey({ mnemonic });
      const wallet = terra.wallet(mk);

      const msgs = [];

      for (const { address, amount } of recipients) {
        if (!address || isNaN(amount) || parseFloat(amount) <= 0) {
          throw new Error("Invalid recipient or amount.");
        }

        const amt = (parseFloat(amount) * 1e6).toFixed(0);

        if (isToken) {
          msgs.push(
            new MsgExecuteContract(wallet.key.accAddress, tokenContract, {
              transfer: {
                recipient: address,
                amount: amt,
              },
            })
          );
        } else {
          msgs.push(new MsgSend(wallet.key.accAddress, address, { uluna: amt }));
        }
      }

      const tx = await wallet.createAndSignTx({
        msgs,
        gasPrices: { uluna: 28.4 },
        gasAdjustment: 1.4,
      });

      const result = await terra.tx.broadcast(tx);

      if (isTxError(result)) {
        setError(`❌ Transaction failed: ${result.raw_log}`);
      } else {
        setTxHash(result.txhash);
        setMnemonic(""); // Clear mnemonic after tx
        setTokenContract("");
        setTokenInfo(null);
        setRecipients([{ address: "", amount: "" }]);
      }
    } catch (err) {
      setError("❌ " + err.message);
    }

    setLoading(false);
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    if (!file.name.endsWith(".xlsx")) {
      setError("❌ Invalid file type. Please upload a .xlsx Excel file.");
      return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
      const data = new Uint8Array(e.target.result);
      try {
        const workbook = XLSX.read(data, { type: "array" });
        const sheet = workbook.Sheets[workbook.SheetNames[0]];
        const rows = XLSX.utils.sheet_to_json(sheet, { header: 1 });

        if (!rows.length || rows[0][0]?.toLowerCase() !== "address" || rows[0][1]?.toLowerCase() !== "amount") {
          setError("❌ Excel file must have 'Address' and 'Amount' columns.");
          return;
        }

        const formattedRecipients = rows.slice(1).map((row) => ({
          address: row[0],
          amount: row[1],
        }));

        const isValid = formattedRecipients.every(
          (r) => r.address && !isNaN(r.amount) && parseFloat(r.amount) > 0
        );

        if (!isValid) {
          setError("❌ Invalid data in Excel file.");
          return;
        }

        setRecipients(formattedRecipients);
        setError("");
      } catch {
        setError("❌ Failed to read the Excel file. Make sure it's properly formatted.");
      }
    };

    reader.readAsArrayBuffer(file);
  };

  const fetchTokenInfo = async () => {
    try {
      if (!tokenContract) return;

      const terra = new LCDClient({
        URL: "https://lcd.terra-classic.hexxagon.io/",
        chainID: "columbus-5",
      });

      const response = await terra.wasm.contractQuery(tokenContract, { token_info: {} });
      setTokenInfo(response);
    } catch (err) {
      setTokenInfo(null);
    }
  };

  useEffect(() => {
    if (isToken && tokenContract.length > 0) {
      fetchTokenInfo();
    } else {
      setTokenInfo(null);
    }
  }, [tokenContract]);

  const resetAll = () => {
    setMnemonic("");
    setTokenContract("");
    setIsToken(true);
    setTokenInfo(null);
    setRecipients([{ address: "", amount: "" }]);
    setTxHash("");
    setError("");
  };

  return (
    <div className="max-w-xl mx-auto p-1 space-y-1 text-white">
      <h1 className="text-2xl font-bold text-center">TCR - A USTC BURNING TOKEN</h1>
      <h5 className="text-2xl font-bold text-center">Welcome to Batch Sender</h5>
      <h5 className="text-2xl font-bold text-center">Please understand and test the utility before using, Use the utility at your own risk, We will not be liable for any losses you may have to occur.</h5>

      <label className="block text-sm">Your 24-word Mnemonic:</label>
      <div className="relative">
        <input
          className="w-full p-2 rounded bg-gray-700 border border-gray-600 pr-10 select-none"
          type={showMnemonic ? "text" : "password"}
          value={mnemonic}
          onChange={(e) => setMnemonic(e.target.value)}
          onCopy={(e) => {
            e.preventDefault();
            alert("❌ Copying mnemonic is disabled for your safety.");
          }}
        />
        <button
          type="button"
          onClick={() => setShowMnemonic(!showMnemonic)}
          className="absolute right-2 top-1/2 transform -translate-y-1/2 text-sm text-blue-300"
        >
          {showMnemonic ? "Hide" : "Show"}
        </button>
      </div>

      <div className="flex items-center space-x-4">
        <label className="text-sm">Send:</label>
        <select
          value={isToken ? "token" : "lunc"}
          onChange={(e) => setIsToken(e.target.value === "token")}
          className="bg-gray-700 border border-gray-600 p-2 rounded"
        >
          <option value="token">CW20 Token</option>
          <option value="lunc">Native LUNC</option>
        </select>
      </div>

      {isToken && (
        <>
          <label className="block text-sm">Token Contract Address:</label>
          <input
            className="w-full p-2 rounded bg-gray-700 border border-gray-600"
            type="text"
            value={tokenContract}
            onChange={(e) => setTokenContract(e.target.value)}
          />
          {tokenInfo && (
            <div className="text-green-400 text-sm mt-1">
              Detected Token: {tokenInfo.name} ({tokenInfo.symbol})
            </div>
          )}
        </>
      )}

      <div className="space-y-2">
        <label className="text-sm block">Upload Excel File:</label>
        <input
          type="file"
          accept=".xlsx"
          onChange={handleFileUpload}
          className="w-full p-2 rounded bg-gray-700 border border-gray-600"
        />
      </div>

      <div className="space-y-2">
        <label className="text-sm block">Recipients:</label>
        {recipients.map((r, index) => (
          <div key={index} className="flex items-center gap-2">
            <input
              className="flex-1 p-2 rounded bg-gray-700 border border-gray-600"
              placeholder="Wallet Address"
              value={r.address}
              onChange={(e) => handleRecipientChange(index, "address", e.target.value)}
            />
            <input
              className="w-24 p-2 rounded bg-gray-700 border border-gray-600"
              placeholder="Amount"
              value={r.amount}
              onChange={(e) => handleRecipientChange(index, "amount", e.target.value)}
            />
            {recipients.length > 1 && (
              <button onClick={() => removeRecipient(index)} className="text-red-400 font-bold">×</button>
            )}
          </div>
        ))}
        <button onClick={addRecipient} className="text-blue-400 mt-1">+ Add another</button>
      </div>

      <button
        onClick={handleSend}
        className="w-full bg-blue-600 hover:bg-blue-700 p-2 rounded"
        disabled={loading}
      >
        {loading ? "Sending..." : "Send Now"}
      </button>

      <button
        onClick={resetAll}
        className="w-full mt-2 bg-gray-600 hover:bg-gray-700 p-2 rounded"
      >
        Reset All
      </button>

      {txHash && (
        <div className="text-green-400 mt-4">
          ✅ Transaction sent! Hash:{" "}
          <a
            href={`https://finder.terra.money/classic/tx/${txHash}`}
            target="_blank"
            rel="noreferrer"
            className="underline"
          >
            {txHash}
          </a>
        </div>
      )}

      {error && <div className="text-red-400 mt-4">{error}</div>}

      <p className="text-sm text-gray-400 mt-6">
        🔒 This app runs in your browser and does not store your mnemonic, address, or amount anywhere.<br /><br />
        <b>We have now Incorporated new Security Features on this app.</b> <br />
        <i>🛠️ Mask Mnemonic Input Field, 🛠️ Add a “Show/Hide Mnemonic” Toggle,  🛠️ Clear Mnemonic from Memory After Tx Automatically, 🛠️ Warn if Mnemonic is Stored in Console or Code , 🛠️ Prevent Copying Mnemonic from Input Field</i> <br />
        <b>Instructions to use the Utility </b> <br />
        Step 1: Enter Menmonic <br />
        Step 2: Enter TokenAddress<br />
        Step 3: If using excel file make sure the structure of excel file is " Address  Amount " and then populate the rows with respective token and amounts you wish to send.<br /><br />

        <b>Help and support Our Project </b><br />
        <a href='https://garuda-defi.org/market/terra1j8hxr6v6g5ku65apq47lta00kgwq7e6kf52vv5twmljz9zvg095qmq4hks'>🛒 Buy TCR</a><br />
        Trade TCR tokens to accelerate USTC Burns + Generate Long Term Wealth <br />
        This is not financial Advice.
        
        
      </p>
    </div>
  );
}
///296 start
////backup to fix excel file up loading
import * as XLSX from 'xlsx/dist/xlsx.full.min.js';
import React, { useState, useEffect } from "react";
import { LCDClient, MnemonicKey, MsgExecuteContract, MsgSend, isTxError } from "@terra-money/terra.js";

export default function App() {
  const [mnemonic, setMnemonic] = useState("");
  const [showMnemonic, setShowMnemonic] = useState(false);
  const [tokenContract, setTokenContract] = useState("");
  const [isToken, setIsToken] = useState(true);
  const [recipients, setRecipients] = useState([{ address: "", amount: "" }]);
  const [txHash, setTxHash] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const [tokenInfo, setTokenInfo] = useState(null);

  useEffect(() => {
    if (console && (console.log.toString().includes("mnemonic") || console.debug?.toString().includes("mnemonic"))) {
      alert("⚠️ Warning: Mnemonic should never be logged to console.");
    }
  }, []);

  const handleRecipientChange = (index, field, value) => {
    const updated = [...recipients];
    updated[index][field] = value;
    setRecipients(updated);
  };

  const addRecipient = () => {
    setRecipients([...recipients, { address: "", amount: "" }]);
  };

  const removeRecipient = (index) => {
    setRecipients(recipients.filter((_, i) => i !== index));
  };

  const handleSend = async () => {
    setError("");
    setTxHash("");
    setLoading(true);

    try {
      const terra = new LCDClient({
        URL: "https://lcd.terra-classic.hexxagon.io/",
        chainID: "columbus-5",
      });

      const mk = new MnemonicKey({ mnemonic });
      const wallet = terra.wallet(mk);

      const msgs = [];

      for (const { address, amount } of recipients) {
        if (!address || isNaN(amount) || parseFloat(amount) <= 0) {
          throw new Error("Invalid recipient or amount.");
        }

        const amt = (parseFloat(amount) * 1e6).toFixed(0);

        if (isToken) {
          msgs.push(
            new MsgExecuteContract(wallet.key.accAddress, tokenContract, {
              transfer: {
                recipient: address,
                amount: amt,
              },
            })
          );
        } else {
          msgs.push(new MsgSend(wallet.key.accAddress, address, { uluna: amt }));
        }
      }

      const tx = await wallet.createAndSignTx({
        msgs,
        gasPrices: { uluna: 28.4 },
        gasAdjustment: 1.4,
      });

      const result = await terra.tx.broadcast(tx);

      if (isTxError(result)) {
        setError(`❌ Transaction failed: ${result.raw_log}`);
      } else {
        setTxHash(result.txhash);
        setMnemonic(""); // Clear mnemonic after tx
        setTokenContract("");
        setTokenInfo(null);
        setRecipients([{ address: "", amount: "" }]);
      }
    } catch (err) {
      setError("❌ " + err.message);
    }

    setLoading(false);
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    if (!file.name.endsWith(".xlsx")) {
      setError("❌ Invalid file type. Please upload a .xlsx Excel file.");
      return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
      const data = new Uint8Array(e.target.result);
      try {
        const workbook = XLSX.read(data, { type: "array" });
        const sheet = workbook.Sheets[workbook.SheetNames[0]];
        const rows = XLSX.utils.sheet_to_json(sheet, { header: 1 });

        if (!rows.length || rows[0][0]?.toLowerCase() !== "address" || rows[0][1]?.toLowerCase() !== "amount") {
          setError("❌ Excel file must have 'Address' and 'Amount' columns.");
          return;
        }

        const formattedRecipients = rows.slice(1).map((row) => ({
          address: row[0],
          amount: row[1],
        }));

        const isValid = formattedRecipients.every(
          (r) => r.address && !isNaN(r.amount) && parseFloat(r.amount) > 0
        );

        if (!isValid) {
          setError("❌ Invalid data in Excel file.");
          return;
        }

        setRecipients(formattedRecipients);
        setError("");
      } catch {
        setError("❌ Failed to read the Excel file. Make sure it's properly formatted.");
      }
    };

    reader.readAsArrayBuffer(file);
  };

  const fetchTokenInfo = async () => {
    try {
      if (!tokenContract) return;

      const terra = new LCDClient({
        URL: "https://lcd.terra-classic.hexxagon.io/",
        chainID: "columbus-5",
      });

      const response = await terra.wasm.contractQuery(tokenContract, { token_info: {} });
      setTokenInfo(response);
    } catch (err) {
      setTokenInfo(null);
    }
  };

  useEffect(() => {
    if (isToken && tokenContract.length > 0) {
      fetchTokenInfo();
    } else {
      setTokenInfo(null);
    }
  }, [tokenContract]);

  const resetAll = () => {
    setMnemonic("");
    setTokenContract("");
    setIsToken(true);
    setTokenInfo(null);
    setRecipients([{ address: "", amount: "" }]);
    setTxHash("");
    setError("");
  };

  return (
    <div className="max-w-xl mx-auto p-1 space-y-1 text-white">
      <h1 className="text-2xl font-bold text-center">TCR - A USTC BURNING TOKEN</h1>
      <h5 className="text-2xl font-bold text-center">Welcome to Batch Sender</h5>
      <h5 className="text-2xl font-bold text-center">Please understand and test the utility before using, Use the utility at your own risk, We will not be liable for any losses you may have to occur.</h5>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm">Your 24-word Mnemonic:</label>
          <div className="relative">
            <input
              className="w-full p-2 rounded bg-gray-700 border border-gray-600 pr-10 select-none"
              type={showMnemonic ? "text" : "password"}
              value={mnemonic}
              onChange={(e) => setMnemonic(e.target.value)}
              onCopy={(e) => {
                e.preventDefault();
                alert("❌ Copying mnemonic is disabled for your safety.");
              }}
            />
            <button
              type="button"
              onClick={() => setShowMnemonic(!showMnemonic)}
              className="absolute right-2 top-1/2 transform -translate-y-1/2 text-sm text-blue-300"
            >
              {showMnemonic ? "Hide" : "Show"}
            </button>
          </div>
        </div>

        <div className="flex items-center space-x-4">
          <label className="text-sm">Send:</label>
          <select
            value={isToken ? "token" : "lunc"}
            onChange={(e) => setIsToken(e.target.value === "token")}
            className="bg-gray-700 border border-gray-600 p-2 rounded"
          >
            <option value="token">CW20 Token</option>
            <option value="lunc">Native LUNC</option>
          </select>
        </div>
      </div>

      {isToken && (
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label className="block text-sm">Token Contract Address:</label>
            <input
              className="w-full p-2 rounded bg-gray-700 border border-gray-600"
              type="text"
              value={tokenContract}
              onChange={(e) => setTokenContract(e.target.value)}
            />
            {tokenInfo && (
              <div className="text-green-400 text-sm mt-1">
                Detected Token: {tokenInfo.name} ({tokenInfo.symbol})
              </div>
            )}
          </div>

          <div>
            <label className="text-sm block">Upload Excel File:</label>
            <input
              type="file"
              accept=".xlsx"
              onChange={handleFileUpload}
              className="w-full p-2 rounded bg-gray-700 border border-gray-600"
            />
          </div>
        </div>
      )}

      <div className="space-y-2">
        <label className="text-sm block">Recipients:</label>
        {recipients.map((r, index) => (
          <div key={index} className="flex items-center gap-2">
            <input
              className="flex-1 p-2 rounded bg-gray-700 border border-gray-600"
              placeholder="Wallet Address"
              value={r.address}
              onChange={(e) => handleRecipientChange(index, "address", e.target.value)}
            />
            <input
              className="w-24 p-2 rounded bg-gray-700 border border-gray-600"
              placeholder="Amount"
              value={r.amount}
              onChange={(e) => handleRecipientChange(index, "amount", e.target.value)}
            />
            {recipients.length > 1 && (
              <button onClick={() => removeRecipient(index)} className="text-red-400 font-bold">×</button>
            )}
          </div>
        ))}
        <button onClick={addRecipient} className="text-blue-400 mt-1">+ Add another</button>
      </div>

      <button
        onClick={handleSend}
        className="w-full bg-blue-600 hover:bg-blue-700 p-2 rounded"
        disabled={loading}
      >
        {loading ? "Sending..." : "Send Now"}
      </button>

      <button
        onClick={resetAll}
        className="w-full mt-2 bg-gray-600 hover:bg-gray-700 p-2 rounded"
      >
        Reset All
      </button>

      {txHash && (
        <div className="text-green-400 mt-4">
          ✅ Transaction sent! Hash:{" "}
          <a
            href={`https://finder.terra.money/classic/tx/${txHash}`}
            target="_blank"
            rel="noreferrer"
            className="underline"
          >
            {txHash}
          </a>
        </div>
      )}

      {error && <div className="text-red-400 mt-4">{error}</div>}

      <p className="text-sm text-gray-400 mt-6">
        🔒 This app runs in your browser and does not store your mnemonic, address, or amount anywhere.<br /><br />
        <b>We have now Incorporated new Security Features on this app.</b> <br />
        <i>🛠️ Mask Mnemonic Input Field, 🛠️ Add a “Show/Hide Mnemonic” Toggle,  🛠️ Clear Mnemonic from Memory After Tx Automatically, 🛠️ Warn if Mnemonic is Stored in Console or Code , 🛠️ Prevent Copying Mnemonic from Input Field</i> <br />
        <b>Instructions to use the Utility </b> <br />
        Step 1: Enter Menmonic <br />
        Step 2: Enter TokenAddress<br />
        Step 3: If using excel file make sure the structure of excel file is " Address  Amount " and then populate the rows with respective token and amounts you wish to send.<br /><br />
        <b>Help and support Our Project </b><br />
        <a href='https://garuda-defi.org/market/terra1j8hxr6v6g5ku65apq47lta00kgwq7e6kf52vv5twmljz9zvg095qmq4hks'>🛒 Buy TCR</a><br />
        Trade TCR tokens to accelerate USTC Burns + Generate Long Term Wealth <br />
        This is not financial Advice.
      </p>
    </div>
  );
}
//starts 619